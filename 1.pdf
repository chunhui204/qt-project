#include "tensor.h"

Tensor::Tensor()
{
    row=0;
    col=0;
    chn=0;
    buffer=NULL;
}

Tensor::Tensor(const Tensor & obj)
{
	row = obj.rows();
	col = obj.cols();
	chn = obj.chns();

	buffer = new float[this->row * this->col * this->chn];

	for (int i = 0; i < row; i++)
	for (int j = 0; j < col; j++)
	for (int k = 0; k < chn; k++)
	{
		*(buffer + i*col*chn + j*chn + k) = *(obj.buffer + i*col*chn + j*chn + k);
	}

}
Tensor::~Tensor()
{
    row=0;
    col=0;
    chn=0;
    delete[] buffer;
    buffer = NULL;
}
Tensor::Tensor(int rows, int cols)
{
    this->row = rows;
    this->col = cols;
    this->chn = 1;
    buffer = new float[this->row * this->col * this->chn]();
}

Tensor::Tensor(int rows, int cols, int chns)
{
    this->row = rows;
    this->col = cols;
    this->chn = chns;
    buffer = new float[this->row * this->col * this->chn]();
}
int Tensor::rows() const
{
    return row;
}
int Tensor::cols() const
{
    return col;
}
int Tensor::chns() const
{
    return chn;
}
float & Tensor::operator()(int i, int j) const
{
    return buffer[i*col + j*chn];
}

float & Tensor::operator()(int i, int j, int k) const
{
    return buffer[i*col*chn + j*chn + k];
}
Tensor & Tensor::operator = (const Tensor& obj)
{
    if (this != &obj)
    {
        row = obj.rows();
        col = obj.cols();
        chn = obj.chns();

        if(this != NULL)
            delete [] buffer;
        buffer = new float[this->row * this->col * this->chn];

        for(int i=0;i<row;i++)
            for(int j=0;j<col;j++)
                for(int k=0;k<chn;k++)
                {
					*(buffer + i*col*chn + j*chn + k) = *(obj.buffer + i*obj.cols()*obj.chns() + j*obj.chns() + k);
                }
    }
	
	return *this;
}
Tensor Tensor::at(int ptr, int axis=0) const
{
    //Tensor形状
    int shape[3] = {0};
    shape[0] = this->row;
    shape[1] = this->col;
    shape[2] = this->chn;
    shape[axis] = 1;

    Tensor result(shape[0], shape[1], shape[2]);

    if(axis==1)
    {
        for(int i=0;i<result.row;i++)
            for(int k=0;k<result.chn;k++)
            {
				*(result.buffer + i*result.chn + k) = *(this->buffer + i*col*chn + ptr*chn + k);
            }
    }
    else if(axis==2)
    {
        for(int i=0;i<result.row;i++)
            for(int j=0;j<result.col;j++)
            {
                *(result.buffer + i*result.col +j) = *(this->buffer + i*col*chn + j*chn + ptr);
            }
    }
    else if(axis == 0)
    {
        for(int j=0;j<result.col;j++)
            for(int k=0;k<result.chn;k++)
            {
                *(result.buffer + j*result.chn +k) = *(this->buffer + ptr*col*chn + j*chn + k);
            }
    }

    return result;
}
void print(const Tensor & obj)
{
    int row = obj.rows();
    int col = obj.cols();
    int chn = obj.chns();

    for(int i=0;i<row;i++)
    {
        for(int j=0;j<col;j++)
        {
            for(int k=0;k<chn;k++)
                cout<<obj(i,j,k)<<"\t";
            cout<<endl;
        }
        cout<<endl;
    }
}
